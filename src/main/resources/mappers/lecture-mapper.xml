<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.edumate.boot.domain.lecture.model.mapper.LectureMapper">
    <select id="totalCount" resultType="int">
        SELECT COUNT(*) FROM LECTURE WHERE LECTURE_YN = 'Y'
    </select>
    <select id="categoryCount" resultType="int">
        SELECT COUNT(*) FROM LECTURE WHERE LECTURE_CATEGORY = #{lectureCategory} AND LECTURE_YN = 'Y'
    </select>
    <select id="selectList" resultType="LectureListRequest">
        SELECT L.LECTURE_NO, L.MEMBER_ID, L.LECTURE_NAME, L.LECTURE_PRICE,
               L.LECTURE_CATEGORY, L.LECTURE_PATH, L.LECTURE_CONTENT, L.LECTURE_CREATED_DATE,
               M.MEMBER_NAME,
               NVL(ROUND(AVG(R.REVIEW_RATING), 1), 0) AS LECTURE_RATING,
               (SELECT COUNT(*) FROM REVIEW WHERE LECTURE_NO = L.LECTURE_NO AND REVIEW_YN = 'Y') AS COUNT_REVIEW,
               (SELECT COUNT(*) FROM PURCHASE WHERE LECTURE_NO = L.LECTURE_NO) AS COUNT_STUDENT,
               NVL((SELECT SUM(VIDEO_TIME) FROM LECTURE_VIDEO WHERE LECTURE_NO = L.LECTURE_NO AND VIDEO_YN = 'Y'), 0) AS TOTAL_VIDEO_TIME
        FROM LECTURE L
        JOIN MEMBER M ON L.MEMBER_ID = M.MEMBER_ID
        LEFT JOIN REVIEW R ON L.LECTURE_NO = R.LECTURE_NO AND R.REVIEW_YN = 'Y'
        WHERE L.LECTURE_YN = 'Y'
        GROUP BY L.LECTURE_NO, L.MEMBER_ID, L.LECTURE_NAME, L.LECTURE_PRICE,
                 L.LECTURE_CATEGORY, L.LECTURE_PATH, L.LECTURE_CONTENT, L.LECTURE_CREATED_DATE, M.MEMBER_NAME
        ORDER BY ${sortValue}
    </select>
    <select id="selectCategoryList" resultType="LectureListRequest">
        SELECT L.LECTURE_NO, L.MEMBER_ID, L.LECTURE_NAME, L.LECTURE_PRICE,
               L.LECTURE_CATEGORY, L.LECTURE_PATH, L.LECTURE_CONTENT, L.LECTURE_CREATED_DATE,
               M.MEMBER_NAME,
               NVL(ROUND(AVG(R.REVIEW_RATING), 1), 0) AS LECTURE_RATING,
               (SELECT COUNT(*) FROM REVIEW WHERE LECTURE_NO = L.LECTURE_NO AND REVIEW_YN = 'Y') AS COUNT_REVIEW,
               (SELECT COUNT(*) FROM PURCHASE WHERE LECTURE_NO = L.LECTURE_NO) AS COUNT_STUDENT
        FROM LECTURE L
        JOIN MEMBER M ON L.MEMBER_ID = M.MEMBER_ID
        LEFT JOIN REVIEW R ON L.LECTURE_NO = R.LECTURE_NO AND R.REVIEW_YN = 'Y'
        WHERE L.LECTURE_CATEGORY = #{category} AND L.LECTURE_YN = 'Y'
        GROUP BY L.LECTURE_NO, L.MEMBER_ID, L.LECTURE_NAME, L.LECTURE_PRICE,
                 L.LECTURE_CATEGORY, L.LECTURE_PATH, L.LECTURE_CONTENT, L.LECTURE_CREATED_DATE, M.MEMBER_NAME
        ORDER BY ${sortValue}
    </select>
    <select id="selectOneById" resultType="LectureListRequest">
        SELECT L.LECTURE_NO, L.MEMBER_ID, L.LECTURE_NAME, L.LECTURE_PRICE,
               L.LECTURE_CATEGORY, L.LECTURE_PATH, L.LECTURE_CONTENT, L.LECTURE_CREATED_DATE,
               M.MEMBER_NAME,
               NVL(ROUND(AVG(R.REVIEW_RATING), 1), 0) AS LECTURE_RATING,
               (SELECT COUNT(*) FROM REVIEW WHERE LECTURE_NO = L.LECTURE_NO AND REVIEW_YN = 'Y') AS COUNT_REVIEW,
               (SELECT COUNT(*) FROM PURCHASE WHERE LECTURE_NO = L.LECTURE_NO) AS COUNT_STUDENT
        FROM LECTURE L
        JOIN MEMBER M ON L.MEMBER_ID = M.MEMBER_ID
        LEFT JOIN REVIEW R ON L.LECTURE_NO = R.LECTURE_NO AND R.REVIEW_YN = 'Y'
        WHERE L.LECTURE_NO = #{lectureNo} AND L.LECTURE_YN = 'Y'
        GROUP BY L.LECTURE_NO, L.MEMBER_ID, L.LECTURE_NAME, L.LECTURE_PRICE,
                 L.LECTURE_CATEGORY, L.LECTURE_PATH, L.LECTURE_CONTENT, L.LECTURE_CREATED_DATE, M.MEMBER_NAME
    </select>
    <select id="selectReviewById" resultType="ReviewListRequest">
        SELECT R.*, M.MEMBER_NAME
        FROM REVIEW R
        JOIN MEMBER M ON R.MEMBER_ID = M.MEMBER_ID
        WHERE R.LECTURE_NO = #{lectureNo} AND R.REVIEW_YN = 'Y'
        ORDER BY R.REVIEW_DATE DESC
    </select>
    <select id="selectVideoListById" resultType="VideoListRequest">
        SELECT * FROM LECTURE_VIDEO
        WHERE LECTURE_NO = #{lectureNo} AND VIDEO_YN ='Y'
        ORDER BY VIDEO_ORDER ASC
    </select>
    <select id="totalVideoById" resultType="int">
        SELECT COUNT(*) FROM LECTURE_VIDEO
        WHERE LECTURE_NO = #{lectureNo} AND VIDEO_YN ='Y'
    </select>
    <select id="totalTimeById" resultType="int">
        SELECT SUM(VIDEO_TIME) FROM LECTURE_VIDEO
        WHERE LECTURE_NO = #{lectureNo} AND VIDEO_YN ='Y'
    </select>
    <select id="selectVideoById" resultType="VideoListRequest">
        SELECT * FROM LECTURE_VIDEO WHERE VIDEO_NO = #{videoNo} AND VIDEO_YN ='Y'
    </select>
    <select id="selectNextVideoById" resultType="VideoListRequest">
        SELECT * FROM LECTURE_VIDEO WHERE LECTURE_NO = #{lectureNo} AND VIDEO_ORDER = #{nextVideoNo} AND VIDEO_YN ='Y'
    </select>
    <select id="selectNameById" resultType="string">
        SELECT LECTURE_NAME FROM LECTURE WHERE LECTURE_NO = #{lectureNo} AND LECTURE_YN = 'Y'
    </select>
    <insert id="insertLecture">
        <selectKey keyProperty="lectureNo" resultType="int" order="BEFORE">
            SELECT SEQ_LECTURE_NO.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO LECTURE
        VALUES(#{lectureNo}, #{memberId}, #{lectureName}
        , #{lectureContent} , #{lecturePrice}, #{lectureCategory}
        , #{lecturePath}, #{lectureCreatedDate}, DEFAULT)
    </insert>

    <insert id="insertVideo">
        INSERT INTO LECTURE_VIDEO
        VALUES(SEQ_VIDEO_NO.NEXTVAL, #{lectureNo}, #{videoTitle}
        , #{videoOrder} , #{videoTime} , #{videoPath}, DEFAULT)
    </insert>
    
    <!-- 통합 검색 -->
    <select id="getSearchCountAll" resultType="int">
        SELECT COUNT(DISTINCT L.LECTURE_NO) 
        FROM LECTURE L
        JOIN MEMBER M ON L.MEMBER_ID = M.MEMBER_ID
        WHERE L.LECTURE_YN = 'Y'
          AND (UPPER(L.LECTURE_NAME) LIKE '%' || UPPER(#{search}) || '%'
          <if test="isAdmin == null or isAdmin == false">
           OR UPPER(L.LECTURE_CONTENT) LIKE '%' || UPPER(#{search}) || '%'
          </if>
           OR UPPER(M.MEMBER_NAME) LIKE '%' || UPPER(#{search}) || '%')
    </select>
    
    <select id="selectSearchAll" resultType="LectureListRequest">
        SELECT * FROM (
            SELECT ROWNUM AS rnum, sub.* FROM (
                SELECT DISTINCT L.LECTURE_NO, L.MEMBER_ID, L.LECTURE_NAME, L.LECTURE_PRICE,
                       L.LECTURE_CATEGORY, L.LECTURE_PATH, L.LECTURE_CONTENT, L.LECTURE_CREATED_DATE,
                       M.MEMBER_NAME,
                       NVL(ROUND(AVG(R.REVIEW_RATING), 1), 0) AS LECTURE_RATING,
                       (SELECT COUNT(*) FROM REVIEW WHERE LECTURE_NO = L.LECTURE_NO AND REVIEW_YN = 'Y') AS COUNT_REVIEW,
                       (SELECT COUNT(*) FROM PURCHASE WHERE LECTURE_NO = L.LECTURE_NO) AS COUNT_STUDENT,
                       (CASE WHEN UPPER(L.LECTURE_NAME) LIKE '%' || UPPER(#{search}) || '%' THEN 100 ELSE 0 END +
                       <if test="isAdmin == null or isAdmin == false">
                        CASE WHEN UPPER(L.LECTURE_CONTENT) LIKE '%' || UPPER(#{search}) || '%' THEN 50 ELSE 0 END +
                       </if>
                        CASE WHEN UPPER(M.MEMBER_NAME) LIKE '%' || UPPER(#{search}) || '%' THEN 30 ELSE 0 END) as search_score
                FROM LECTURE L
                JOIN MEMBER M ON L.MEMBER_ID = M.MEMBER_ID
                LEFT JOIN REVIEW R ON L.LECTURE_NO = R.LECTURE_NO AND R.REVIEW_YN = 'Y'
                WHERE L.LECTURE_YN = 'Y'
                  AND (UPPER(L.LECTURE_NAME) LIKE '%' || UPPER(#{search}) || '%'
                  <if test="isAdmin == null or isAdmin == false">
                   OR UPPER(L.LECTURE_CONTENT) LIKE '%' || UPPER(#{search}) || '%'
                  </if>
                   OR UPPER(M.MEMBER_NAME) LIKE '%' || UPPER(#{search}) || '%')
                GROUP BY L.LECTURE_NO, L.MEMBER_ID, L.LECTURE_NAME, L.LECTURE_PRICE,
                         L.LECTURE_CATEGORY, L.LECTURE_PATH, L.LECTURE_CONTENT, L.LECTURE_CREATED_DATE, M.MEMBER_NAME
                ORDER BY search_score DESC, ${sortValue}
            ) sub
        ) WHERE rnum BETWEEN #{startRow} AND #{endRow}
    </select>
    
    <!-- 검색 + 카테고리 -->
    <select id="getSearchCategoryCount" resultType="int">
        SELECT COUNT(DISTINCT L.LECTURE_NO) 
        FROM LECTURE L
        JOIN MEMBER M ON L.MEMBER_ID = M.MEMBER_ID
        WHERE L.LECTURE_CATEGORY = #{category} AND L.LECTURE_YN = 'Y'
          AND (UPPER(L.LECTURE_NAME) LIKE '%' || UPPER(#{search}) || '%'
          <if test="isAdmin == null or isAdmin == false">
           OR UPPER(L.LECTURE_CONTENT) LIKE '%' || UPPER(#{search}) || '%'
          </if>
           OR UPPER(M.MEMBER_NAME) LIKE '%' || UPPER(#{search}) || '%')
    </select>
    
    <select id="selectSearchCategoryList" resultType="LectureListRequest">
        SELECT * FROM (
            SELECT ROWNUM AS rnum, sub.* FROM (
                SELECT DISTINCT L.LECTURE_NO, L.MEMBER_ID, L.LECTURE_NAME, L.LECTURE_PRICE,
                       L.LECTURE_CATEGORY, L.LECTURE_PATH, L.LECTURE_CONTENT, L.LECTURE_CREATED_DATE,
                       M.MEMBER_NAME,
                       NVL(ROUND(AVG(R.REVIEW_RATING), 1), 0) AS LECTURE_RATING,
                       (SELECT COUNT(*) FROM REVIEW WHERE LECTURE_NO = L.LECTURE_NO AND REVIEW_YN = 'Y') AS COUNT_REVIEW,
                       (SELECT COUNT(*) FROM PURCHASE WHERE LECTURE_NO = L.LECTURE_NO) AS COUNT_STUDENT,
                       (CASE WHEN UPPER(L.LECTURE_NAME) LIKE '%' || UPPER(#{search}) || '%' THEN 100 ELSE 0 END +
                       <if test="isAdmin == null or isAdmin == false">
                        CASE WHEN UPPER(L.LECTURE_CONTENT) LIKE '%' || UPPER(#{search}) || '%' THEN 50 ELSE 0 END +
                       </if>
                        CASE WHEN UPPER(M.MEMBER_NAME) LIKE '%' || UPPER(#{search}) || '%' THEN 30 ELSE 0 END) as search_score
                FROM LECTURE L
                JOIN MEMBER M ON L.MEMBER_ID = M.MEMBER_ID
                LEFT JOIN REVIEW R ON L.LECTURE_NO = R.LECTURE_NO AND R.REVIEW_YN = 'Y'
                WHERE L.LECTURE_CATEGORY = #{category} AND L.LECTURE_YN = 'Y'
                  AND (UPPER(L.LECTURE_NAME) LIKE '%' || UPPER(#{search}) || '%'
                  <if test="isAdmin == null or isAdmin == false">
                   OR UPPER(L.LECTURE_CONTENT) LIKE '%' || UPPER(#{search}) || '%'
                  </if>
                   OR UPPER(M.MEMBER_NAME) LIKE '%' || UPPER(#{search}) || '%')
                GROUP BY L.LECTURE_NO, L.MEMBER_ID, L.LECTURE_NAME, L.LECTURE_PRICE,
                         L.LECTURE_CATEGORY, L.LECTURE_PATH, L.LECTURE_CONTENT, L.LECTURE_CREATED_DATE, M.MEMBER_NAME
                ORDER BY search_score DESC, ${sortValue}
            ) sub
        ) WHERE rnum BETWEEN #{startRow} AND #{endRow}
    </select>

    <select id="checkTeacher" resultType="int">
        SELECT COUNT(*) FROM MEMBER WHERE
        MEMBER_ID = #{loginId } AND TEACHER_YN = 'Y'
    </select>

    <select id="checkPurchase" resultType="int">
        SELECT COUNT(*) FROM PURCHASE WHERE
        MEMBER_ID = #{memberId, jdbcType=VARCHAR} AND LECTURE_NO = #{lectureNo, jdbcType=NUMERIC}
    </select>

    <select id="selectMember" resultType="Member">
        SELECT * FROM MEMBER WHERE MEMBER_ID = #{memberId}
    </select>
    <select id="selectLecture" resultType="Lecture">
        SELECT * FROM LECTURE WHERE LECTURE_NO = #{lectureNo} AND LECTURE_YN = 'Y'
    </select>
    <select id="checkLogin" resultType="int">
        SELECT COUNT(*) FROM MEMBER WHERE MEMBER_ID = #{memberId}
    </select>
    <insert id="insertQuestion">
        INSERT INTO QUESTION VALUES(SEQ_QUESTION_NO.NEXTVAL, #{memberId}
        ,#{questionTitle}, #{questionContent}, SYSTIMESTAMP, DEFAULT, DEFAULT)
    </insert>
    
    <select id="checkDuplicateLecture" resultType="int">
        SELECT COUNT(*) FROM LECTURE 
        WHERE LECTURE_NAME = #{lectureName} 
        AND MEMBER_ID = #{memberId} 
        AND LECTURE_YN = 'Y'
    </select>
    
    <update id="deleteVideo">
        UPDATE LECTURE_VIDEO SET VIDEO_YN = 'N' WHERE VIDEO_NO = #{videoNo}
    </update>
    
    <select id="getVideoOrder" resultType="int">
        SELECT VIDEO_ORDER FROM LECTURE_VIDEO WHERE VIDEO_NO = #{videoNo}
    </select>
    
    <update id="reorderVideosAfterDelete">
        UPDATE LECTURE_VIDEO 
        SET VIDEO_ORDER = VIDEO_ORDER - 1 
        WHERE LECTURE_NO = #{lectureNo} 
          AND VIDEO_ORDER > #{deletedOrder} 
          AND VIDEO_YN = 'Y'
    </update>
    
    <update id="deleteLecture">
        UPDATE LECTURE SET LECTURE_YN = 'N' WHERE LECTURE_NO = #{lectureNo}
    </update>

    <select id="findPurchaseById" resultType="int">
        SELECT COUNT(*) FROM PURCHASE WHERE MEMBER_ID = #{memberId} AND LECTURE_NO = #{lectureNo}
    </select>
    
    <select id="findOwnerBYId" resultType="int">
        SELECT COUNT(*) FROM LECTURE WHERE MEMBER_ID = #{memberId} AND LECTURE_NO = #{lectureNo} AND LECTURE_YN = 'Y'
    </select>

    <select id="selectVideo" resultType="int">
        SELECT VIDEO_NO FROM PURCHASE WHERE MEMBER_ID = #{memberId} AND LECTURE_NO = #{lectureNo}
    </select>

    <!-- 강의 수정 관련 쿼리 -->
    <select id="selectLectureForEdit" resultType="Lecture">
        SELECT LECTURE_NO, MEMBER_ID, LECTURE_NAME, LECTURE_CONTENT, 
               LECTURE_PRICE, LECTURE_CATEGORY, LECTURE_PATH, LECTURE_CREATED_DATE, LECTURE_YN
        FROM LECTURE 
        WHERE LECTURE_NO = #{lectureNo} AND LECTURE_YN = 'Y'
    </select>

    <update id="updateLecture">
        UPDATE LECTURE 
        SET LECTURE_NAME = #{lectureName},
            LECTURE_CONTENT = #{lectureContent},
            LECTURE_PRICE = #{lecturePrice},
            LECTURE_CATEGORY = #{lectureCategory}
            <if test="lecturePath != null and lecturePath != ''">
            , LECTURE_PATH = #{lecturePath}
            </if>
        WHERE LECTURE_NO = #{lectureNo} AND LECTURE_YN = 'Y'
    </update>

    <select id="getNextVideoOrder" resultType="int">
        SELECT NVL(MAX(VIDEO_ORDER), 0) + 1
        FROM LECTURE_VIDEO 
        WHERE LECTURE_NO = #{lectureNo} AND VIDEO_YN = 'Y'
    </select>

    <update id="updateVideo">
        UPDATE LECTURE_VIDEO 
        SET VIDEO_TITLE = #{videoTitle}
            <if test="videoPath != null and videoPath != ''">
            , VIDEO_PATH = #{videoPath}
            </if>
            <if test="videoTime != null and videoTime > 0">
            , VIDEO_TIME = #{videoTime}
            </if>
        WHERE VIDEO_NO = #{videoNo} AND VIDEO_YN = 'Y'
    </update>

    <update id="updateVideoOrder">
        UPDATE LECTURE_VIDEO 
        SET VIDEO_ORDER = #{newOrder}
        WHERE VIDEO_NO = #{videoNo} AND VIDEO_YN = 'Y'
    </update>
</mapper>

